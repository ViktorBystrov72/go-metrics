// Package staticlint предоставляет multichecker для статического анализа кода Go.
//
// Multichecker объединяет различные статические анализаторы в один инструмент:
// - Стандартные анализаторы из golang.org/x/tools/go/analysis/passes
// - Все анализаторы класса SA из staticcheck.io
// - Несколько анализаторов других классов из staticcheck.io
// - Собственный анализатор exitcheck
//
// Запуск multichecker:
//
//	./staticlint [флаги] [пакеты]
//
// Примеры использования:
//
//	./staticlint ./...                    # Проверка всех пакетов в проекте
//	./staticlint ./internal/...           # Проверка пакетов internal
//	./staticlint -help                    # Справка по флагам
//	./staticlint -help exitcheck          # Справка по конкретному анализатору
//
// Анализаторы:
//
// Стандартные анализаторы (golang.org/x/tools/go/analysis/passes):
// - printf: проверяет соответствие спецификаторов printf и аргументов
// - shadow: находит затененные переменные
// - shift: проверяет корректность операций побитового сдвига
// - structtag: проверяет корректность тегов структур
// - unreachable: находит недостижимый код
//
// Анализаторы staticcheck класса SA:
// - SA1000: неправильное использование стандартных библиотек
// - SA2000: проблемы с многопоточностью
// - SA3000: проблемы с тестами
// - SA4000: бесполезный код
// - SA5000: ошибочный код
// - SA6000: проблемы с производительностью
// - SA9000: сомнительные конструкции кода
//
// Анализаторы других классов staticcheck:
// - S1000: упрощения кода
// - ST1000: стилистические проверки
//
// Собственный анализатор:
// - exitcheck: запрещает прямой вызов os.Exit в функции main пакета main
//
// Конфигурация:
//
// Multichecker поддерживает конфигурацию через флаги командной строки.
// Каждый анализатор может иметь собственные флаги.
//
// Примеры проблемного кода:
//
//	// exitcheck - прямой вызов os.Exit в main
//	func main() {
//		os.Exit(1) // вызовет предупреждение
//	}
//
//	// shadow - затененная переменная
//	func example() {
//		x := 1
//		if true {
//			x := 2 // затеняет внешнюю переменную x
//		}
//	}
//
//	// printf - несоответствие спецификаторов
//	fmt.Printf("Value: %s", 123) // %s ожидает строку, а не число
//
//	// structtag - некорректный тег
//	type User struct {
//		Name string `json:"name"` // корректно
//		Age  int    `json: "age"` // лишний пробел после двоеточия
//	}
//
//	// unreachable - недостижимый код
//	func example() {
//		return
//		fmt.Println("Этот код никогда не выполнится")
//	}
//
//	// shift - некорректный сдвиг
//	var x int = 1
//	x = x << 64 // сдвиг на 64 бита для int некорректен
//
// Рекомендации по использованию:
//
// 1. Интегрируйте multichecker в CI/CD pipeline для автоматической проверки кода
// 2. Настройте IDE для запуска multichecker при сохранении файлов
// 3. Используйте флаги для отключения ненужных проверок в конкретных случаях
// 4. Регулярно обновляйте multichecker для получения новых проверок
//
// Установка:
//
//	go build -o staticlint ./cmd/staticlint
//
// Или установка в $GOPATH/bin:
//
//	go install ./cmd/staticlint
package main
